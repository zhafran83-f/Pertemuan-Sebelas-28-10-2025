/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pertemuan_enam;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;

/**
 *
 * @author Lenovo IP 330-14IKB
 */
public class Update extends javax.swing.JFrame {

    private EntityManagerFactory emf;
    private EntityManager em;
    private String originalID;
    private String originalJudul;

    /**
     * Creates new form Update
     */
    public Update() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Update Data Buku");
    }

    public Update(String idBuku) {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Update Data Buku");

        this.originalID = idBuku;

        tf_ID_Update.setText(idBuku);
        loadDataByID(idBuku);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tf_ID_Update = new javax.swing.JTextField();
        tf_Judul_Update = new javax.swing.JTextField();
        tf_Penulis_Update = new javax.swing.JTextField();
        tf_Penerbit_Update = new javax.swing.JTextField();
        tf_Tahun_Update = new javax.swing.JTextField();
        Button_Update = new javax.swing.JButton();
        Button_Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("ID Buku");

        jLabel2.setText("Judul");

        jLabel3.setText("Penulis");

        jLabel4.setText("Penerbit");

        jLabel5.setText("Tahun");

        Button_Update.setText("UPDATE");
        Button_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_UpdateActionPerformed(evt);
            }
        });

        Button_Cancel.setText("CANCEL");
        Button_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Button_Update)
                        .addGap(34, 34, 34)
                        .addComponent(Button_Cancel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tf_ID_Update, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addComponent(tf_Judul_Update)
                        .addComponent(tf_Penulis_Update)
                        .addComponent(tf_Penerbit_Update)
                        .addComponent(tf_Tahun_Update)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_ID_Update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_Judul_Update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_Penulis_Update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tf_Penerbit_Update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_Tahun_Update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_Update)
                    .addComponent(Button_Cancel))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_UpdateActionPerformed
        // TODO add your handling code here:
        updateData();
    }//GEN-LAST:event_Button_UpdateActionPerformed

    private void Button_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_CancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_Button_CancelActionPerformed

    private void updateData() {
        if (tf_ID_Update.getText().trim().isEmpty()
                || tf_Judul_Update.getText().trim().isEmpty()
                || tf_Penulis_Update.getText().trim().isEmpty()
                || tf_Penerbit_Update.getText().trim().isEmpty()
                || tf_Tahun_Update.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(this,
                    "Semua field harus diisi!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        int tahun;
        try {
            tahun = Integer.parseInt(tf_Tahun_Update.getText().trim());
            if (tahun < 1000 || tahun > 9999) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Tahun harus berupa angka 4 digit (contoh: 2023)!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newID = tf_ID_Update.getText().trim();
        String newJudul = tf_Judul_Update.getText().trim();

        emf = null;
        em = null;

        try {
            emf = Persistence.createEntityManagerFactory("Pertemuan_EnamPU");
            em = emf.createEntityManager();

            // Cek jika ID diubah dan ID baru sudah ada
            if (!newID.equals(originalID)) {
                TypedQuery<Long> query = em.createQuery(
                        "SELECT COUNT(b) FROM Buku b WHERE b.idBuku = :idBuku", Long.class);
                query.setParameter("idBuku", newID);
                Long count = query.getSingleResult();

                if (count > 0) {
                    JOptionPane.showMessageDialog(this,
                            "ID Buku '" + newID + "' sudah ada! Gunakan ID yang berbeda.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Cek jika judul diubah dan judul baru sudah ada
            if (!newJudul.equals(originalJudul)) {
                TypedQuery<Long> query = em.createQuery(
                        "SELECT COUNT(b) FROM Buku b WHERE b.judul = :judul AND b.idBuku != :originalID", Long.class);
                query.setParameter("judul", newJudul);
                query.setParameter("originalID", originalID);
                Long count = query.getSingleResult();

                if (count > 0) {
                    JOptionPane.showMessageDialog(this,
                            "Judul buku '" + newJudul + "' sudah ada! Gunakan judul yang berbeda.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Update data dengan JPA
            em.getTransaction().begin();

            Buku buku = em.find(Buku.class, originalID);

            if (buku != null) {
                // Update fields
                buku.setIdBuku(newID);
                buku.setJudul(newJudul);
                buku.setPenulis(tf_Penulis_Update.getText().trim());
                buku.setPenerbit(tf_Penerbit_Update.getText().trim());
                buku.setTahun(tahun);

                em.getTransaction().commit();

                JOptionPane.showMessageDialog(this,
                        "Data berhasil diupdate!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                dispose();
            } else {
                em.getTransaction().rollback();
                JOptionPane.showMessageDialog(this,
                        "Data tidak ditemukan! Pastikan ID buku benar.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            // Rollback jika ada error
            if (em != null && em.getTransaction().isActive()) {
                em.getTransaction().rollback();
            }
            JOptionPane.showMessageDialog(this,
                    "Error: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            // Clean up resources
            if (em != null && em.isOpen()) {
                em.close();
            }
            if (emf != null && emf.isOpen()) {
                emf.close();
            }
        }
    }

    private void loadDataByID(String idBuku) {
        emf = null;
        em = null;

        try {
            emf = Persistence.createEntityManagerFactory("Pertemuan_EnamPU");
            em = emf.createEntityManager();

            // Cari data menggunakan JPA
            Buku buku = em.find(Buku.class, idBuku);

            if (buku != null) {
                // Isi field dengan data dari entity
                tf_Judul_Update.setText(buku.getJudul());
                tf_Penulis_Update.setText(buku.getPenulis());
                tf_Penerbit_Update.setText(buku.getPenerbit());
                tf_Tahun_Update.setText(String.valueOf(buku.getTahun()));

                this.originalJudul = buku.getJudul();
            } else {
                JOptionPane.showMessageDialog(this,
                        "Data dengan ID " + idBuku + " tidak ditemukan!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                dispose();
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error database: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            // Clean up resources
            if (em != null && em.isOpen()) {
                em.close();
            }
            if (emf != null && emf.isOpen()) {
                emf.close();
            }
        }
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Cancel;
    private javax.swing.JButton Button_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField tf_ID_Update;
    private javax.swing.JTextField tf_Judul_Update;
    private javax.swing.JTextField tf_Penerbit_Update;
    private javax.swing.JTextField tf_Penulis_Update;
    private javax.swing.JTextField tf_Tahun_Update;
    // End of variables declaration//GEN-END:variables
}
